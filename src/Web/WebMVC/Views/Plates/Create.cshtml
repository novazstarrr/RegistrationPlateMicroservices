@model RTCodingExercise.Microservices.Models.CreatePlateViewModel

<div class="container">
    <h2>Create New Plate</h2>

    <form id="createPlateForm">
        <div class="validation-summary-errors text-danger" asp-validation-summary="ModelOnly"></div>

        <div class="form-group mb-3">
            <label asp-for="Registration" class="form-label">Registration</label>
            <input asp-for="Registration" class="form-control" maxlength="7" />
            <span asp-validation-for="Registration" class="text-danger"></span>
            <small class="form-text text-muted">Alphanumeric characters only, max 7 characters</small>
        </div>

        <div class="form-group mb-3">
            <label asp-for="PurchasePrice" class="form-label">Purchase Price (£)</label>
            <input asp-for="PurchasePrice" class="form-control" type="number" step="0.01" min="0.01" max="1000000" />
            <span asp-validation-for="PurchasePrice" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="SalePrice" class="form-label">Sale Price (£)</label>
            <input asp-for="SalePrice" class="form-control" type="number" step="0.01" min="0.01" max="1000000" />
            <span asp-validation-for="SalePrice" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Letters" class="form-label">Letters</label>
            <input asp-for="Letters" class="form-control" readonly />
            <span asp-validation-for="Letters" class="text-danger"></span>
            <small class="form-text text-muted">Auto-populated from registration</small>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Numbers" class="form-label">Numbers</label>
            <input asp-for="Numbers" class="form-control" readonly />
            <span asp-validation-for="Numbers" class="text-danger"></span>
            <small class="form-text text-muted">Auto-populated from registration</small>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Create Plate</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Document ready');

            const form = document.getElementById('createPlateForm');
            const registrationInput = document.getElementById('Registration');
            const lettersInput = document.getElementById('Letters');
            const numbersInput = document.getElementById('Numbers');

            function updateLettersAndNumbers(registration) {
                console.log('Updating Letters and Numbers:', registration);
                if (!registration) {
                    lettersInput.value = '';
                    numbersInput.value = '';
                    return;
                }

                const letters = registration.replace(/[0-9]/g, '');
                const numbers = registration.replace(/[^0-9]/g, '');

                lettersInput.value = letters;
                numbersInput.value = numbers ? parseInt(numbers) : '';
            }

            registrationInput.addEventListener('input', function(e) {
                console.log('Registration input changed');
                const value = e.target.value.toUpperCase();
                e.target.value = value;
                updateLettersAndNumbers(value);
            });

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('Form submitted');

                const formData = {
                    registration: registrationInput.value,
                    purchasePrice: parseFloat(document.getElementById('PurchasePrice').value),
                    salePrice: parseFloat(document.getElementById('SalePrice').value),
                    letters: lettersInput.value,
                    numbers: parseInt(numbersInput.value)
                };

                console.log('Form data:', formData);

                fetch('@Url.Action("Create")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errors => Promise.reject(errors));
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Success:', data);
                    window.location.href = '@Url.Action("Index")';
                })
                .catch(errors => {
                    console.error('Error:', errors);
                    if (typeof errors === 'object') {
                        Object.keys(errors).forEach(key => {
                            const errorSpan = document.querySelector(`[data-valmsg-for="${key}"]`);
                            if (errorSpan) {
                                errorSpan.textContent = Array.isArray(errors[key])
                                    ? errors[key][0]
                                    : errors[key];
                            }
                        });
                    } else {
                        alert('An error occurred while creating the plate.');
                    }
                });
            });

            // Initial population if registration exists
            if (registrationInput.value) {
                updateLettersAndNumbers(registrationInput.value);
            }
        });
    </script>
}